// This is your Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts       Account[]
    sessions       Session[]
    posts          Post[]    @relation("UserPosts")
    likedPosts     Post[]    @relation("UserLikedPosts")
    savedPosts     Post[]    @relation("UserSavedPosts")
    comments       Comment[]
    tasksCreated   Task[]    @relation("CreatedTasks")
    tasksCompleted Task[]    @relation("CompletedTasks")

    referredBy   User?   @relation("UserReferrer", fields: [referredById], references: [id])
    referredById String?
    referrals    User[]  @relation("UserReferrer")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id       String  @id @default(cuid())
    title    String
    content  String?
    author   User    @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
    authorId String
    likedBy  User[]  @relation("UserLikedPosts")
    savedBy  User[]  @relation("UserSavedPosts")

    comments Comment[]
    likes    Like[]
    saves    Saved[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment {
    id      String @id @default(cuid())
    content String
    post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId  String

    author User?   @relation(fields: [userId], references: [id])
    userId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id        String   @id @default(cuid())
    title     String
    content   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator   User   @relation("CreatedTasks", fields: [creatorId], references: [id])
    creatorId String

    completedBy   User?   @relation("CompletedTasks", fields: [completedById], references: [id])
    completedById String?
}

model Like {
    id     String @id @default(cuid())
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Saved {
    id     String @id @default(cuid())
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
